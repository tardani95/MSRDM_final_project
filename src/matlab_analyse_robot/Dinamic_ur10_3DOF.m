%This file was atutomatically generated by --Generate_Dinamic--
function Qpp = Dinamic_ur10_3DOF(u)

    %% Joint variables
    %Joint Position
    q1 = u(1);
    q2 = u(2);
    q3 = u(3);
    %Joint Position Vector
    Q = [q1; q2; q3];

    %Joint Velocity
    q1p = u(4);
    q2p = u(5);
    q3p = u(6);
    %Joint Velocity Vector
    Qp = [q1p; q2p; q3p];

    %% Robot Parameters
    robot_param = u(7:44);
    L_param = robot_param(1:10);
    m_param = robot_param(11:13);
    I_param = robot_param(14:31);
    b_param = robot_param(32:34);
    g_vec_param = robot_param(35:37);
    g_param = robot_param(38);

    L1 = L_param(1);
    L2 = L_param(2);
    L4 = L_param(3);
    L6 = L_param(4);
    L7 = L_param(5);
    L9 = L_param(6);
    L3 = L_param(7);
    L5 = L_param(8);
    L8 = L_param(9);
    L10 = L_param(10);

    m1 = m_param(1);
    m2 = m_param(2);
    m3 = m_param(3);

    I1_param = I_param(1:6);
    I111 = I1_param(1);
    I112 = I1_param(2);
    I113 = I1_param(3);
    I122 = I1_param(4);
    I123 = I1_param(5);
    I133 = I1_param(6);

    I2_param = I_param(7:12);
    I211 = I2_param(1);
    I212 = I2_param(2);
    I213 = I2_param(3);
    I222 = I2_param(4);
    I223 = I2_param(5);
    I233 = I2_param(6);

    I3_param = I_param(13:18);
    I311 = I3_param(1);
    I312 = I3_param(2);
    I313 = I3_param(3);
    I322 = I3_param(4);
    I323 = I3_param(5);
    I333 = I3_param(6);

    Beta(1, 1) = b_param(1);
    Beta(2, 2) = b_param(2);
    Beta(3, 3) = b_param(3);

    gx = g_vec_param(1);
    gy = g_vec_param(2);
    gz = g_vec_param(3);
    g = g_param;

    %Inertia Matrix
    M = [I122 + I211 / 2 + I222 / 2 + I311 / 2 + I322 / 2 + (I311 * cos(2 * q2 + 2 * q3)) / 2 - (I322 * cos(2 * q2 + 2 * q3)) / 2 - I312 * sin(2 * q2 + 2 * q3) + (L3^2 * m3) / 2 + L7^2 * m2 + (L8^2 * m2) / 2 + L9^2 * m3 + (L10^2 * m3) / 2 + (I211 * cos(2 * q2)) / 2 - (I222 * cos(2 * q2)) / 2 - I212 * sin(2 * q2) - (L3^2 * m3 * cos(2 * q2)) / 2 - (L8^2 * m2 * cos(2 * q2)) / 2 - (L10^2 * m3 * cos(2 * q2 + 2 * q3)) / 2 + L3 * L10 * m3 * cos(q3) - L3 * L10 * m3 * cos(2 * q2 + q3), I313 * cos(q2 + q3) - I323 * sin(q2 + q3) + I213 * cos(q2) - I223 * sin(q2) - L9 * L10 * m3 * cos(q2 + q3) - L3 * L9 * m3 * cos(q2) - L7 * L8 * m2 * cos(q2), I313 * cos(q2 + q3) - I323 * sin(q2 + q3) - L9 * L10 * m3 * cos(q2 + q3); I313 * cos(q2 + q3) - I323 * sin(q2 + q3) + I213 * cos(q2) - I223 * sin(q2) - L9 * L10 * m3 * cos(q2 + q3) - L3 * L9 * m3 * cos(q2) - L7 * L8 * m2 * cos(q2), I233 + I333 + L3^2 * m3 + L8^2 * m2 + L10^2 * m3 + 2 * L3 * L10 * m3 * cos(q3), I333 + L10^2 * m3 + L3 * L10 * m3 * cos(q3); I313 * cos(q2 + q3) - I323 * sin(q2 + q3) - L9 * L10 * m3 * cos(q2 + q3), I333 + L10^2 * m3 + L3 * L10 * m3 * cos(q3), I333 + L10^2 * m3];

    %Centripetal and Coriolis Matrix
    C = [(I222 * q2p * sin(2 * q2)) / 2 - (I211 * q2p * sin(2 * q2)) / 2 - I212 * q2p * cos(2 * q2) - I312 * q2p * cos(2 * q2 + 2 * q3) - I312 * q3p * cos(2 * q2 + 2 * q3) - (I311 * q2p * sin(2 * q2 + 2 * q3)) / 2 - (I311 * q3p * sin(2 * q2 + 2 * q3)) / 2 + (I322 * q2p * sin(2 * q2 + 2 * q3)) / 2 + (I322 * q3p * sin(2 * q2 + 2 * q3)) / 2 + (L3^2 * m3 * q2p * sin(2 * q2)) / 2 + (L8^2 * m2 * q2p * sin(2 * q2)) / 2 + (L10^2 * m3 * q2p * sin(2 * q2 + 2 * q3)) / 2 + (L10^2 * m3 * q3p * sin(2 * q2 + 2 * q3)) / 2 - (L3 * L10 * m3 * q3p * sin(q3)) / 2 + L3 * L10 * m3 * q2p * sin(2 * q2 + q3) + (L3 * L10 * m3 * q3p * sin(2 * q2 + q3)) / 2, (I222 * q1p * sin(2 * q2)) / 2 - (I211 * q1p * sin(2 * q2)) / 2 - I212 * q1p * cos(2 * q2) - I312 * q1p * cos(2 * q2 + 2 * q3) - (I311 * q1p * sin(2 * q2 + 2 * q3)) / 2 + (I322 * q1p * sin(2 * q2 + 2 * q3)) / 2 - I323 * q2p * cos(q2 + q3) - I323 * q3p * cos(q2 + q3) - I313 * q2p * sin(q2 + q3) - I313 * q3p * sin(q2 + q3) - I223 * q2p * cos(q2) - I213 * q2p * sin(q2) + (L3^2 * m3 * q1p * sin(2 * q2)) / 2 + (L8^2 * m2 * q1p * sin(2 * q2)) / 2 + (L10^2 * m3 * q1p * sin(2 * q2 + 2 * q3)) / 2 + L9 * L10 * m3 * q2p * sin(q2 + q3) + L9 * L10 * m3 * q3p * sin(q2 + q3) + L3 * L9 * m3 * q2p * sin(q2) + L7 * L8 * m2 * q2p * sin(q2) + L3 * L10 * m3 * q1p * sin(2 * q2 + q3), (I322 * q1p * sin(2 * q2 + 2 * q3)) / 2 - (I311 * q1p * sin(2 * q2 + 2 * q3)) / 2 - I312 * q1p * cos(2 * q2 + 2 * q3) - I323 * q2p * cos(q2 + q3) - I323 * q3p * cos(q2 + q3) - I313 * q2p * sin(q2 + q3) - I313 * q3p * sin(q2 + q3) + (L10^2 * m3 * q1p * sin(2 * q2 + 2 * q3)) / 2 + L9 * L10 * m3 * q2p * sin(q2 + q3) + L9 * L10 * m3 * q3p * sin(q2 + q3) - (L3 * L10 * m3 * q1p * sin(q3)) / 2 + (L3 * L10 * m3 * q1p * sin(2 * q2 + q3)) / 2; -(q1p * (I322 * sin(2 * q2 + 2 * q3) - I311 * sin(2 * q2 + 2 * q3) - 2 * I312 * cos(2 * q2 + 2 * q3) - 2 * I212 * cos(2 * q2) - I211 * sin(2 * q2) + I222 * sin(2 * q2) + L3^2 * m3 * sin(2 * q2) + L8^2 * m2 * sin(2 * q2) + L10^2 * m3 * sin(2 * q2 + 2 * q3) + 2 * L3 * L10 * m3 * sin(2 * q2 + q3))) / 2, -L3 * L10 * m3 * q3p * sin(q3), -L3 * L10 * m3 * sin(q3) * (q2p + q3p); (q1p * (2 * I312 * cos(2 * q2 + 2 * q3) + I311 * sin(2 * q2 + 2 * q3) - I322 * sin(2 * q2 + 2 * q3) - L10^2 * m3 * sin(2 * q2 + 2 * q3) + L3 * L10 * m3 * sin(q3) - L3 * L10 * m3 * sin(2 * q2 + q3))) / 2, L3 * L10 * m3 * q2p * sin(q3), 0];

    %Gravitational Torques Vector
    G = [g * (L7 * gx * m2 * cos(q1) + L9 * gx * m3 * cos(q1) + L7 * gy * m2 * sin(q1) + L9 * gy * m3 * sin(q1) - L3 * gy * m3 * cos(q1) * sin(q2) - L8 * gy * m2 * cos(q1) * sin(q2) + L3 * gx * m3 * sin(q1) * sin(q2) + L8 * gx * m2 * sin(q1) * sin(q2) - L10 * gy * m3 * cos(q1) * cos(q2) * sin(q3) - L10 * gy * m3 * cos(q1) * cos(q3) * sin(q2) + L10 * gx * m3 * cos(q2) * sin(q1) * sin(q3) + L10 * gx * m3 * cos(q3) * sin(q1) * sin(q2)); L10 * g * gx * m3 * cos(q1) * sin(q2) * sin(q3) - L8 * g * gz * m2 * sin(q2) - L3 * g * gx * m3 * cos(q1) * cos(q2) - L8 * g * gx * m2 * cos(q1) * cos(q2) - L3 * g * gy * m3 * cos(q2) * sin(q1) - L8 * g * gy * m2 * cos(q2) * sin(q1) - L10 * g * gz * m3 * cos(q2) * sin(q3) - L10 * g * gz * m3 * cos(q3) * sin(q2) - L10 * g * gx * m3 * cos(q1) * cos(q2) * cos(q3) - L10 * g * gy * m3 * cos(q2) * cos(q3) * sin(q1) - L3 * g * gz * m3 * sin(q2) + L10 * g * gy * m3 * sin(q1) * sin(q2) * sin(q3); -L10 * g * m3 * (gz * cos(q2) * sin(q3) + gz * cos(q3) * sin(q2) + gx * cos(q1) * cos(q2) * cos(q3) + gy * cos(q2) * cos(q3) * sin(q1) - gx * cos(q1) * sin(q2) * sin(q3) - gy * sin(q1) * sin(q2) * sin(q3))];

    %% Torque
    Tao = u(45:47);

    % Validate the skew symetric property - already validated in the
    % direct_euler_lagrange_prr script
    if ~isPd(M)
        disp('Error!! Matrix M is NOT positive definit!');
    end

    %     M
    %     det(M)

    Qpp = M \ (Tao - C * Qp - G - Beta * Qp);

end
